(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global.PureRead = factory());
}(this, (function () { 'use strict';

  var classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  var createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;
    var desc = Object.getOwnPropertyDescriptor(object, property);

    if (desc === undefined) {
      var parent = Object.getPrototypeOf(object);

      if (parent === null) {
        return undefined;
      } else {
        return get(parent, property, receiver);
      }
    } else if ("value" in desc) {
      return desc.value;
    } else {
      var getter = desc.get;

      if (getter === undefined) {
        return undefined;
      }

      return getter.call(receiver);
    }
  };

  var inherits = function (subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  };

  var possibleConstructorReturn = function (self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  };

  var slicedToArray = function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  }();

  var toConsumableArray = function (arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    } else {
      return Array.from(arr);
    }
  };

  console.log("=== PureRead: Util load ===");

  /**
   * Deep clone object
   * 
   * @param  {object} target object
   * @return {object} new target object
   */
  function clone(target) {
      return $.extend(true, {}, target);
  }

  /**
   * Get URI
   * 
   * @return {string} e.g. current site url is http://www.cnbeta.com/articles/1234.html return http://www.cnbeta.com/articles/
   */
  function getURI() {
      var name = function name(pathname) {
          pathname = pathname != "/" && pathname.endsWith("/") ? pathname = pathname.replace(/\/$/, "") : pathname;
          return pathname.replace(/\/[%@#.~a-zA-Z0-9_-]+$|^\/$/g, "");
      },
          path = name(window.location.pathname);
      return window.location.protocol + "//" + window.location.hostname + path + "/";
  }

  /**
   * Get url and parser location
   * 
   * @param {string} url 
   */
  function getLocation(href) {
      if (document) {
          var a = document.createElement("a");
          a.href = href;
          return a;
      } else {
          var match = href.match(/^(https?\:)\/\/(([^:\/?#]*)(?:\:([0-9]+))?)([\/]{0,1}[^?#]*)(\?[^#]*|)(#.*|)$/);
          return match && {
              href: href,
              protocol: match[1],
              host: match[2],
              hostname: match[3],
              port: match[4],
              pathname: match[5],
              search: match[6],
              hash: match[7]
          };
      }
  }

  /**
   * Verify html
   * 
   * @param  {string} input include html tag, e.g.:
      <div class="article fmt article__content">
   *
   * @return {array} 0: int include ( -1: fail； 0: empty html; 1: success; 2: special tag )
   *                 1: result
   */
  function verifyHtml(html) {
      if (html == "") return [0, html];else if (specTest(html)) return [2, html];
      var item = html.match(/<\S+ (class|id)=("|')?[\w-_=;:' ]+("|')?>?$|<[^/][-_a-zA-Z0-9]+>?$/ig);
      if (item && item.length > 0) {
          return [1, item];
      } else {
          return [-1, undefined];
      }
  }

  /**
   * Conver html to jquery object
   * 
   * @param  {string} input include html tag, e.g.:
      <div class="article fmt article__content">
   *
   * @return {string} formatting e.g.:
              h2#news_title
              div.introduction
              div.content
              div.clearfix
              div.rating_box
              span
              special tag, @see specTest
                   e.g. [['<strong>▽</strong>']]        [[[$('.article-btn')]]]
                        [[/src=\\S+(342459.png)\\S+'/]] [[{$('.content').html()}]]
   *
   */
  function selector(html) {
      var _verifyHtml = verifyHtml(html),
          _verifyHtml2 = slicedToArray(_verifyHtml, 2),
          code = _verifyHtml2[0],
          item = _verifyHtml2[1];

      if (code == 2) return html;else if (code == 1) {
          var _item$0$trim$replace$ = item[0].trim().replace(/['"<>]/g, "").replace(/ /ig, "=").split("="),
              _item$0$trim$replace$2 = slicedToArray(_item$0$trim$replace$, 3),
              tag = _item$0$trim$replace$2[0],
              prop = _item$0$trim$replace$2[1],
              value = _item$0$trim$replace$2[2]; // ["h2", "class", "title"]


          if (!prop) prop = tag;else if (prop.toLowerCase() === "class") prop = tag + "." + value;else if (prop.toLowerCase() === "id") prop = tag + "#" + value;
          return prop;
      } else {
          return null;
      }
  }

  /**
   * Verify special action, action include:
     - [[{juqery code}]] // new Function, e.g. $("xxx").xxx() return string
     - [['text']]        // remove '<text>'
     - [[/regexp/]]      // regexp e.g. $("sr-rd-content").find( "*[src='http://ifanr-cdn.b0.upaiyun.com/wp-content/uploads/2016/09/AppSo-qrcode-signature.jpg']" )
     - [[[juqery code]]] // new Function, e.g. $("xxx").find() return jquery object

   * 
   * @param  {string} verify content
   * @return {boolen} verify result
   */
  function specTest(content) {
      return (/^(\[\[)[\[{'/]{1}[ \S]+[}'/\]]\]\]{1}($)/g.test(content)
      );
  }

  /**
   * Exec special action, action include: @see specTest
   * type: 0, 3 - be chiefly used in include logic
   * type: 1, 2 - be chiefly used in exclude logic
   * 
   * @param  {string} content
   * @return {array}  0: result; 1: type( include: -1:error 0:{} 1:'' 2:// 3:[])
   */
  function specAction(content) {
      var _ref = [content.replace(/(^)\[\[|\]\]$/g, "")],
          value = _ref[0],
          type = _ref[1];

      switch (value[0]) {
          case "{":
              value = value.replace(/^{|}$/g, "");
              content = function (v) {
                  return new Function("return " + v)();
              }(value);
              type = 0;
              break;
          case "'":
              content = value.replace(/^'|'$/g, "");
              var name = content.match(/^<[a-zA-Z0-9_-]+>/g).join("").replace(/<|>/g, "");
              var str = content.replace(/<[/a-zA-Z0-9_-]+>/g, "");
              content = name + ":contains(" + str + ")";
              type = 1;
              break;
          case "/":
              content = value.replace(/^\/|\/$/g, "").replace(/\\{2}/g, "\\").replace(/'/g, '"');
              type = 2;
              break;
          case "[":
              value = value.replace(/^{|}$/g, "");
              content = function (v) {
                  return new Function("return " + v)();
              }(value)[0];
              type = 3;
              break;
          default:
              console.error("Not support current action.", content);
              type = -1;
              break;
      }
      return [content, type];
  }

  console.log("=== PureRead: AdapteSite load ===");

  var site = {
      url: "",
      target: "",
      matching: [],
      name: "", // only read mode
      title: "", // only read mode
      desc: "", // only read mode
      exclude: [],
      include: "",
      avatar: [],
      paging: []
  };
  var minimatch = void 0,
      rdability = void 0,
      markdown = void 0,
      host_href = void 0;

  var AdapteSite = function () {
      function AdapteSite() {
          var sites = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { global: [], custom: [], local: [] };
          classCallCheck(this, AdapteSite);

          this.url = getURI();
          this.sites = sites; // include: global, custom, local, person
          this.current = {};
          this.state = "none"; // include: meta, txt, adapter, none, temp
          this.origins = [];
          host_href = location.href; // origin url
      }

      /**
       * Set url
       */


      createClass(AdapteSite, [{
          key: "SetURL",
          value: function SetURL(value) {
              var uri = getLocation(value);
              // Clone util.getURI() source
              var name = function name(pathname) {
                  pathname = pathname != "/" && pathname.endsWith("/") ? pathname = pathname.replace(/\/$/, "") : pathname;
                  return pathname.replace(/\/[%@#.~a-zA-Z0-9_-]+$|^\/$/g, "");
              },
                  path = name(uri.pathname);
              this.url = uri.protocol + "//" + uri.hostname + path + "/";
              host_href = value;
          }

          /**
           * Set global minimatch
           */

      }, {
          key: "SetMinimatch",
          value: function SetMinimatch(value) {
              minimatch = value;
          }

          /**
           * Set global rdability
           */

      }, {
          key: "SetRdability",
          value: function SetRdability(value) {
              rdability = value;
          }

          /**
           * Set global markdown
           */

      }, {
          key: "SetMarkdown",
          value: function SetMarkdown(value) {
              markdown = value;
          }

          /**
           * Not adapter usage mozilla readability and readtmpl
           */

      }, {
          key: "Readability",
          value: function Readability() {
              try {
                  var _location = document.location,
                      uri = {
                      spec: _location.href,
                      host: _location.host,
                      prePath: _location.protocol + "//" + _location.host,
                      scheme: _location.protocol.substr(0, _location.protocol.indexOf(":")),
                      pathBase: _location.protocol + "//" + _location.host + _location.pathname.substr(0, _location.pathname.lastIndexOf("/") + 1)
                  },
                      article = new rdability.Readability(uri, document.cloneNode(true)).parse();
                  if (article && article.content != "") {
                      console.warn("current parse is Readability", article);
                      this.Newsite("read", article.content);
                      this.dom = $(article.content)[0];
                      this.state = "temp";
                  } else throw "Readability error";
              } catch (error) {
                  var $dom = readtmpl();
                  if ($dom != -1) {
                      this.Newsite("read", $dom[0].outerHTML);
                      this.dom = $dom[0];
                      this.state = "temp";
                  } else this.current.site = clone(site);
              }
          }

          /**
           * Get site from url
           * 
           * @param {string} include: global, custom, local
           * @param {string} url 
           */

      }, {
          key: "Getsite",
          value: function Getsite(type, url) {
              return this.sites[type].find(function (item) {
                  return item[0] == url;
              });
          }

          /**
           * Get sites from url
           */

      }, {
          key: "Getsites",
          value: function Getsites() {
              var _this = this;

              var matching = [],
                  meta = readmeta();
              this.current.url = this.url;
              if (meta) {
                  this.current.auto = meta.auto;
                  this.current.url = meta.url;
                  delete meta.auto;
                  delete meta.url;
                  this.current.site = _extends({}, meta);
                  this.current.site.name.startsWith("metaread::") && (this.state = "meta");
                  this.current.site.name.startsWith("txtread::") && (this.state = "txt");
              } else {
                  getsite("local", new Map(this.sites.local), this.url, matching);
                  getsite("global", new Map(this.sites.global), this.url, matching);
                  getsite("person", new Map(this.sites.person), this.url, matching);
                  getsite("custom", new Map(this.sites.custom), this.url, matching);
                  if (matching.length > 0) {
                      var found = void 0;
                      matching.forEach(function (site) {
                          if (site[1].active) {
                              found = site;
                              _this.current.url = found[0];
                              _this.current.site = _this.Safesite(_extends({}, found[1]), found[2], found[0]);
                              _this.state = "adapter";
                          }
                      });
                      if (!found) {
                          var _found = matching[0];
                          _found[1].active = true;
                          this.current.url = _found[0];
                          this.current.site = this.Safesite(_extends({}, _found[1]), _found[2], _found[0]);
                          this.state = "adapter";
                      }
                  } else {
                      var obj = readmulti();
                      if (obj != -1) {
                          this.Newmultisite("read", obj);
                          this.state = "temp";
                      } else {
                          this.Readability();
                      }
                  }
              }
              this.current.site.matching = matching;
          }

          /**
           * Add new sites to this.sites.global( global sites )
           * 
           * @param {object} sites.[array]
           * @return {int} update sites count
           */

      }, {
          key: "Addsites",
          value: function Addsites(result) {
              var count = 0;
              if (this.sites.global.length == 0) {
                  this.sites.global = this.Formatsites(result);
                  count = this.sites.global.length;
              } else {
                  var obj = addsites(this.Formatsites(result), this.sites.global);
                  count = obj.count;
                  this.sites.global = obj.newsites;
              }
              return count;
          }

          /**
           * Add new sites to this.sites.local( local sites )
           * 
           * @param  {object} new sites
           * @return {array} this.sites.local
           */

      }, {
          key: "Addlocalsites",
          value: function Addlocalsites(new_sites) {
              this.sites.local = [].concat(toConsumableArray(new_sites));
              return this.sites.local;
          }

          /**
           * Add all sites to this.sites
           * 
           * @param  {object} new sites
           * @return {object} this.sites
           */

      }, {
          key: "Addallsites",
          value: function Addallsites(sites) {
              this.sites = {
                  global: [].concat(toConsumableArray(sites.global)),
                  person: [].concat(toConsumableArray(sites.person)),
                  custom: [].concat(toConsumableArray(sites.custom)),
                  local: [].concat(toConsumableArray(sites.local))
              };
              return this.sites;
          }

          /**
           * Add new site( read only )
           * 
           * @param {string} include: focus, read
           * @param {string} when read html is dom.outerHTML
           */

      }, {
          key: "Newsite",
          value: function Newsite(mode, html) {
              var new_site = { mode: mode, url: window.location.href, site: { name: "tempread::" + window.location.host, title: "<title>", desc: "", include: "", exclude: [] } };
              html && (new_site.site.html = html);
              this.current.mode = new_site.mode, this.current.url = new_site.url;
              this.current.site = this.Safesite(_extends({}, new_site.site), "local", new_site.url);
              console.log("【read only】current site object is ", this.current);
          }

          /**
           * Add new multi-site( read only )
           * 
           * @param {string} include: focus, read
           * @param {object} multi-page, avator, include
           */

      }, {
          key: "Newmultisite",
          value: function Newmultisite(mode, multi) {
              var new_site = { mode: mode, url: window.location.href, site: { name: "tempread::" + window.location.host, title: "<title>", desc: "", include: multi.include, exclude: [], avatar: multi.avatar } };
              this.current.mode = new_site.mode, this.current.url = new_site.url;
              this.current.site = this.Safesite(_extends({}, new_site.site), "local", new_site.url);
              console.log("【read only】current multi-site object is ", this.current);
          }

          /**
           * Update url and site from param
           * 
           * @param {string} value is: global, custom, local
           * @param {string} older url
           * @param {array}  [ url, new site]
           */

      }, {
          key: "Updatesite",
          value: function Updatesite(key, older, newer) {
              var idx = this.sites[key].findIndex(function (item) {
                  return item[0] == older;
              });
              idx == -1 && (idx = this.sites[key].length);
              this.sites[key].splice(idx, 1, newer);
          }

          /**
           * Delete site from this.sites.local
           * 
           * @param {string} value is: global, custom, local
           * @param {string} older url
           * @param {func}   callback
           */

      }, {
          key: "Deletesite",
          value: function Deletesite(key, older, callback) {
              var idx = this.sites[key].findIndex(function (item) {
                  return item[0] == older;
              });
              idx != -1 && this.sites[key].splice(idx, 1);
              callback(idx);
          }

          /**
           * Safe site, add all site props
           * 
           * @param {object} modify site 
           * @param {string} target include: global custom local
           * @param {string} url 
           * @returns {object} site
           */

      }, {
          key: "Safesite",
          value: function Safesite(site, target, url) {
              site.url = url;
              site.target = target;
              site.name == "" && (site.name = "tempread::");
              (!site.avatar || site.avatar.length == 0) && (site.avatar = [{ name: "" }, { url: "" }]);
              (!site.paging || site.paging.length == 0) && (site.paging = [{ prev: "" }, { next: "" }]);
              return site;
          }

          /**
           * Clean useless site props
           * 
           * @param   {object} site
           * @returns {object} site
          */

      }, {
          key: "Cleansite",
          value: function Cleansite(site) {
              delete site.url;
              delete site.html;
              delete site.target;
              delete site.matching;
              site.avatar && site.avatar.length > 0 && site.avatar[0].name == "" && delete site.avatar;
              site.paging && site.paging.length > 0 && site.paging[0].prev == "" && delete site.paging;
              return site;
          }

          /**
           * Format sites object from local or remote json file
           * 
           * @param  {object} sites.[array]
           * @return {array} foramat e.g. [[ <url>, object ],[ <url>, object ]]
           */

      }, {
          key: "Formatsites",
          value: function Formatsites(result) {
              var format = new Map();
              var _iteratorNormalCompletion = true;
              var _didIteratorError = false;
              var _iteratorError = undefined;

              try {
                  for (var _iterator = result.sites[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                      var _site = _step.value;

                      if (verifysite(_site) != 0) continue;
                      var url = _site.url;
                      delete _site.url;
                      format.set(url, _site);
                  }
              } catch (err) {
                  _didIteratorError = true;
                  _iteratorError = err;
              } finally {
                  try {
                      if (!_iteratorNormalCompletion && _iterator.return) {
                          _iterator.return();
                      }
                  } finally {
                      if (_didIteratorError) {
                          throw _iteratorError;
                      }
                  }
              }

              return [].concat(toConsumableArray(format));
          }

          /**
           * Clear sites
           * 
           * @param {string} site type, only include: global, custom. local
           */

      }, {
          key: "Clearsites",
          value: function Clearsites(type) {
              type ? this.sites[type] = [] : this.sites = { global: [], custom: [], local: [] };
          }

          /**
           * Add urls to origins
           * 
           * @param {json} result json
           */

      }, {
          key: "Origins",
          value: function Origins(result) {
              var urls = result.origins.map(function (item) {
                  return item.url;
              });
              urls = new Set(this.origins.concat(urls));
              urls.forEach(function (item) {
                  if (item.trim() == "" || !item.trim().startsWith("http") || !item.trim().endsWith(".json")) urls.delete(item);
              });
              this.origins = [].concat(toConsumableArray(urls));
              return this.origins;
          }

          /**
           * Add new sites to this.sites.custom( custom sites )
           * 
           * @param  {object} new sites
           * @return {array} this.sites.custom
           */

      }, {
          key: "Addorigins",
          value: function Addorigins(new_sites) {
              this.sites.custom = [].concat(toConsumableArray(new_sites));
              return this.sites.custom;
          }

          /**
           * Clear origins
           * 
           * @returns custom.length
           */

      }, {
          key: "Clearorigins",
          value: function Clearorigins() {
              var len = this.sites.custom.length;
              this.sites.custom = [];
              return len;
          }
      }]);
      return AdapteSite;
  }();
  function readmeta() {
      if (minimatch(location.href, "file://**/*.txt") || minimatch(location.href, "http*://**/*.txt")) {
          return readtxt();
      }
      if (minimatch(location.href, "file://**/*.md") || minimatch(location.href, "http*://**/*.md")) {
          return readmd();
      }
      var reg = /<\S+ (class|id)=("|')?[\w-_=;:' ]+("|')?>?$|<[^/][-_a-zA-Z0-9]+>?$/ig,
          // from util.verifyHtml()
      meta = {
          name: $("meta[name='simpread:name']").attr("content"),
          url: $("meta[name='simpread:url']").attr("content"),
          title: $("meta[name='simpread:title']").attr("content"),
          desc: $("meta[name='simpread:desc']").attr("content"),
          include: $("meta[name='simpread:include']").attr("content"),
          exp: $("meta[name='simpread:exclude']").attr("content"),
          auto: $("meta[name='simpread:auto']").attr("content"),
          exclude: []
      };
      if (meta.name && meta.include) {
          if (meta.url && !minimatch(location.href, meta.url)) {
              return undefined;
          }
          !meta.title && (meta.title = "<title>");
          !meta.desc && (meta.desc = "");
          !meta.exp && (meta.exp = "");
          meta.name = "metaread::" + meta.name;
          meta.auto = meta.auto == "true" ? true : false;
          var idx = ["title", "desc", "include", "exp"].findIndex(function (item) {
              return meta[item] != "" && !meta[item].match(reg);
          });
          meta.exclude.push(meta.exp);
          delete meta.exp;
          console.assert(idx == -1, "meta read mode error. ", meta);
          return idx == -1 ? meta : undefined;
      } else {
          console.warn("current not found meta data", meta);
          return undefined;
      }
  }

  /**
   * Read txt, include: file and http
   */
  function readtxt() {
      var title = location.pathname.split("/").pop(),
          type = location.protocol == "file:" ? "local" : "remote",
          meta = {
          name: "txtread::" + type,
          title: "<title>",
          desc: "",
          include: "<pre>",
          auto: false,
          exclude: []
      };
      if (type == "remote") {
          meta.include = "";
          meta.html = $("body pre").html().replace(/\n/ig, "<br>");
      }
      !$("title").html() && $("head").append("<title>" + decodeURI(title.replace(".txt", "")) + "</title>");
      return meta;
  }

  /**
   * Read Markdown, include: file and http
   */
  function readmd() {
      var title = location.pathname.split("/").pop(),
          type = location.protocol == "file:" ? "local" : "remote",
          meta = {
          name: "txtread::" + type,
          title: "<title>",
          desc: "",
          include: "",
          auto: false,
          exclude: []
      };
      var converter = new markdown.default.Converter(),
          html = converter.makeHtml($("body pre").text());
      meta.html = html;
      !$("title").html() && $("head").append("<title>" + decodeURI(title.replace(".md", "")) + "</title>");
      return meta;
  }

  /**
   * Read mode template, include:
   * 
   * - Hexo
   * - WordPress
   * - Common( include <article> )
   * 
   * @return {jquery} jquery object
   */
  function readtmpl() {
      var $root = $("body"),
          selectors = [".post-content", ".entry-content", ".post-article", ".content-post", ".article-entry", ".article-content", ".article-body", ".markdown-body", "[itemprop='articleBody']", "article", ".post", ".content"];
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
          for (var _iterator2 = selectors[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var selector$$1 = _step2.value;

              var $target = $root.find(selector$$1);
              if ($target.length > 0) {
                  console.warn("current selector is", selector$$1);
                  return $target;
              }
          }
      } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
      } finally {
          try {
              if (!_iteratorNormalCompletion2 && _iterator2.return) {
                  _iterator2.return();
              }
          } finally {
              if (_didIteratorError2) {
                  throw _iteratorError2;
              }
          }
      }

      return -1;
  }

  /**
   * Read mode multi template, include:
   * 
   * - Discuz
   * - Discourse
   * 
   * @return {object} true: object; false: -1
   */
  function readmulti() {
      if (location.pathname.includes("thread") || location.pathname.includes("forum.php")) {
          if ($('.t_f').length > 0 && $('.favatar').find('.authi').length > 0 && $('.avatar').find('img').length > 0) {
              return {
                  avatar: [{ "name": "[[{$('.favatar').find('.authi')}]]" }, { "url": "[[{$('.avatar').find('img')}]]" }],
                  include: "[[{$('.t_f')}]]"
              };
          }
      } else if (/\/t\/[\w-]+\/\d+/.test(location.pathname) && $('meta[name=generator]').attr("content").includes("discourse")) {
          return {
              avatar: [{ "name": "[[{$('.topic-avatar').find('.a[data-user-card]')}]]" }, { "url": "[[{$('.topic-avatar').find('img')}]]" }],
              include: "[[{$('.cooked')}]]"
          };
      }
      return -1;
  }

  /**
   * Add new sites to old sites
   * 
   * @param  {array}  new     sites from local or remote
   * @param  {array}  current sites from this.sites.global
   * @return {object} count: new sites; forced: update sites( discard, all site must be forced update)
   */
  function addsites(newsites, old) {
      var oldsites = new Map(old),
          urls = [].concat(toConsumableArray(oldsites.keys()));
      var count = 0;

      newsites.map(function (site) {
          if (!urls.includes(site[0])) {
              count++;
          } else if (urls.includes(site[0])) {
          }
      });
      return { count: count, newsites: newsites };
  }

  /**
   * Find site by url from sites
   * 
   * @param  {string} type, include: global, local, custom
   * @param  {map}    sites
   * @param  {string} url
   * @param  {array}  matching sites
   * 
   * @return {array}  0: current site; 1: current url， 2: type
   */
  function getsite(type, sites, url) {
      var matching = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

      var domain = function domain(names) {
          var arr = names.replace("www.", "").match(/\.\S+\.\S+/g);
          if (arr) {
              return arr[0].substr(1);
          } else {
              return names.replace("www.", "");
          }
      },
          local = getLocation(host_href),
          urls = [].concat(toConsumableArray(sites.keys())),
          arr = url.match(/[.a-zA-z0-9-_]+/g),
          uri = arr[1].replace("www.", ""),
          hostname = domain(local.hostname),
          isroot = function isroot() {
          return local.pathname == "/" || /\/(default|index|portal).[0-9a-zA-Z]+$/.test(local.pathname);
      };
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
          for (var _iterator3 = urls[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var cur = _step3.value;

              var name = sites.get(cur).name,
                  sufname = domain(name);
              if (!isroot() && !cur.endsWith("*") && cur.replace(/^http[s]?:/, "") == url.replace(/^http[s]?:/, "")) {
                  matching.push([cur, clone(sites.get(cur)), type]);
              } else if (cur.match(/\*/g) && cur.match(/\*/g).length == 1 && !isroot() && cur.endsWith("*") && uri.includes(sufname) && hostname == sufname && url.includes(name)) {
                  // e.g. https://www.douban.com/* http://mp.weixin.qq.com/*
                  matching.push([cur, clone(sites.get(cur)), type]);
              } else if (minimatch(local.origin + local.pathname, cur)) {
                  matching.push([cur, clone(sites.get(cur)), type]);
              }
          }
      } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
      } finally {
          try {
              if (!_iteratorNormalCompletion3 && _iterator3.return) {
                  _iterator3.return();
              }
          } finally {
              if (_didIteratorError3) {
                  throw _iteratorError3;
              }
          }
      }
  }

  /**
   * Verify site validity, include:
   * - name, url, include, error is -1
   * - title include desc, error is -2
   * - paging, error is -3 ~ -6
   * - avatar, error is -7 ~ -10
   * 
   * @param {object} site 
   */
  function verifysite(site) {
      if (!site.name || !site.url || !site.include) return -1;
      if (verifyHtml(site.title)[0] == -1 || verifyHtml(site.include)[0] == -1 || verifyHtml(site.desc)[0] == -1) {
          return -2;
      }
      if (site.paging) {
          if (site.paging.length != 2) return -3;
          if (!site.paging[0].prev) return -4;
          if (!site.paging[1].next) return -5;
          if (verifyHtml(site.paging[0].prev)[0] == -1 || verifyHtml(site.paging[1].next)[0] == -1) {
              return -6;
          }
      }
      if (site.avatar) {
          if (site.avatar.length != 2) return -7;
          if (!site.avatar[0].name) return -8;
          if (!site.avatar[1].url) return -9;
          if (verifyHtml(site.avatar[0].name)[0] == -1 || verifyHtml(site.avatar[1].url)[0] == -1) {
              return -10;
          }
      }
      return 0;
  }

  console.log("=== PureRead: PureRead load ===");

  var PureRead = function (_AdapteSite) {
      inherits(PureRead, _AdapteSite);

      function PureRead(sites) {
          classCallCheck(this, PureRead);

          var _this = possibleConstructorReturn(this, (PureRead.__proto__ || Object.getPrototypeOf(PureRead)).call(this, sites));

          _this.version = "0.0.4 build 0424";
          _this.org_url = location.href;
          _this.html = {}; // clone site, include: title, desc, include, avatar, paging
          _this.plugin = {};
          _this.pure = false; // when true, is remove style, class attr
          _this.cleanup = false; // when true, call beautify.cleanHTML()
          return _this;
      }

      /**
       * Verify current puread is same
       * 
       * @return {boolean} true: same; false: not same;
       */


      createClass(PureRead, [{
          key: 'Exist',
          value: function Exist() {
              return this.org_url == location.href;
          }

          /**
           * Add Plugin
           * 
           * @param {object} plugin object
           */

      }, {
          key: 'AddPlugin',
          value: function AddPlugin(plugin) {
              this.plugin = {
                  minimatch: plugin.minimatch,
                  pangu: plugin.pangu,
                  beautify: plugin.beautify,
                  stylesheet: plugin.style,
                  rdability: plugin.rdability,
                  markdown: plugin.markdown
              };
              get(PureRead.prototype.__proto__ || Object.getPrototypeOf(PureRead.prototype), 'SetMinimatch', this).call(this, this.plugin.minimatch);
              get(PureRead.prototype.__proto__ || Object.getPrototypeOf(PureRead.prototype), 'SetRdability', this).call(this, this.plugin.rdability);
              get(PureRead.prototype.__proto__ || Object.getPrototypeOf(PureRead.prototype), 'SetMarkdown', this).call(this, this.plugin.markdown);
          }

          /**
           * Create temp read mode
           * 
           * @param {string} include: read, focus
           * @param {dom} html dom element
           */

      }, {
          key: 'TempMode',
          value: function TempMode(mode, dom) {
              this.state = "temp";
              this.dom = dom;
              this.Newsite(mode, dom.outerHTML);
          }

          /**
           * Get read mode html
           */

      }, {
          key: 'ReadMode',
          value: function ReadMode() {
              this.html = wrap(this.current.site);
          }

          /**
           * Get highlight( focus ) jquery, only usage focus mode
           * 
           * @return {jquery} jquery object
           */

      }, {
          key: 'Include',
          value: function Include() {
              var include = this.current.site.include,
                  $focus = [];
              var target = selector(include);
              try {
                  if (specTest(target)) {
                      var _util$specAction = specAction(include),
                          _util$specAction2 = slicedToArray(_util$specAction, 2),
                          value = _util$specAction2[0],
                          state = _util$specAction2[1];

                      if (state == 0) {
                          include = include.replace(/\[\[{\$\(|}\]\]|\).html\(\)/g, "");
                          $focus = $(specAction('[[[' + include + ']]]')[0]);
                      } else if (state == 3) {
                          $focus = value;
                      }
                  } else if (target) {
                      $focus = $("body").find(target);
                  }
              } catch (error) {
                  console.error("Get $focus failed", error);
              }
              return $focus;
          }

          /**
           * Get exlcude jquery selector array list
           * 
           * @param  {jquery} jquery object
           * @return {array} jquery selector
           */

      }, {
          key: 'Exclude',
          value: function Exclude($target) {
              return excludeSelector($target, this.current.site.exclude);
          }

          /**
           * Beautify html
           * 
           * @param {jquery} jquery
           */

      }, {
          key: 'Beautify',
          value: function Beautify($target) {
              if (this.plugin.beautify) {
                  this.cleanup && this.plugin.beautify.cleanHTML($target, this.pure);
                  this.plugin.beautify.specbeautify(this.current.site.name, $target);
                  this.plugin.beautify.removeSpareTag(this.current.site.name, $target);
                  this.plugin.beautify.htmlbeautify($target);
                  this.plugin.beautify.commbeautify(this.current.site.name, $target);
              }
          }

          /**
           * Format usage pangu plugin
           * 
           * @param {string} class name
           */

      }, {
          key: 'Format',
          value: function Format(cls) {
              this.plugin.pangu && this.plugin.pangu.spacingElementByClassName(cls);
          }
      }]);
      return PureRead;
  }(AdapteSite);
  function wrap(site) {
      var wrapper = clone(site),
          title = selector(site.title == "" ? "<title>" : site.title),
          desc = selector(site.desc),
          include = selector(site.include);
      wrapper.title = site.title == "" || site.title == "<title>" ? $("head title").text() : query(title);
      wrapper.desc = query(desc);
      wrapper.include = site.include == "" && site.html != "" ? site.html : query(include, "html");
      wrapper.avatar && wrapper.avatar.length > 0 && wrapper.avatar[0].name == "" && delete wrapper.avatar;
      wrapper.paging && wrapper.paging.length > 0 && wrapper.paging[0].prev == "" && delete wrapper.paging;
      wrapper.avatar && wrapper.avatar.forEach(function (item) {
          var key = Object.keys(item).join(),
              value = item[key];
          item[key] = query(selector(value), "html");
      });
      wrapper.paging && wrapper.paging.forEach(function (item) {
          var key = Object.keys(item).join(),
              value = item[key];
          item[key] = query(selector(value));
      });
      return wrapper;
  }

  /**
   * Query content usage jquery
   * 
   * @param  {string} query content
   * @param  {string} type, incldue: text,  html and multi
   * @return {string} query result
   */
  function query(content) {
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "text";

      var $root = $("html");
      if (specTest(content)) {
          var _util$specAction3 = specAction(content),
              _util$specAction4 = slicedToArray(_util$specAction3, 2),
              value = _util$specAction4[0],
              state = _util$specAction4[1];

          if (state == 0) {
              content = value;
          } else if (state == 3) {
              content = getcontent($root.find(value));
          }
      } else if (type == "html") {
          content = getcontent($root.find(content));
      } else if (type == "multi") {
          // TO-DO
      } else {
          content = $root.find(content).text().trim();
      }
      return content;
  }

  /**
   * Get content from current.site.include
   * 
   * @param  {jquery} jquery object e.g. $root.find( content )
   * @return {string} $target html
   */
  function getcontent($target) {
      var html = "";
      switch ($target.length) {
          case 0:
              html = "<sr-rd-content-error></sr-rd-content-error>";
              break;
          case 1:
              html = $target.html().trim();
              break;
          default:
              html = $target.map(function (index, item) {
                  return $(item).html();
              }).get().join("<br>");
              break;
      }
      return html;
  }

  /**
   * Get exclude tags list
   * 
   * @param  {jquery} jquery object
   * @param  {array}  hidden html
   * @return {string} tags list string
   */
  function excludeSelector($target, exclude) {
      var tags = [],
          tag = "";
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
          for (var _iterator = exclude[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var content = _step.value;

              if (specTest(content)) {
                  var _util$specAction5 = specAction(content),
                      _util$specAction6 = slicedToArray(_util$specAction5, 2),
                      value = _util$specAction6[0],
                      type = _util$specAction6[1];

                  if (type == 1) {
                      tag = value;
                  } else if (type == 2) {
                      var arr = $target.html().match(new RegExp(value, "g"));
                      if (arr && arr.length > 0) {
                          var str = arr.join("");
                          tag = '*[' + str + ']';
                      } else {
                          tag = undefined;
                      }
                  } else if (type == 3) {
                      value.remove();
                  }
              } else {
                  tag = selector(content);
              }
              if (tag) tags.push(tag);
          }
      } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
      } finally {
          try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                  _iterator.return();
              }
          } finally {
              if (_didIteratorError) {
                  throw _iteratorError;
              }
          }
      }

      return tags.join(",");
  }

  return PureRead;

})));
